<!--
* description: 经销商对应仓库维护--弹窗
* author: chchhui
* createdDate: 2019-08-01
* logs：
*  20190801 新增页面功能
-->
<template>
  <section>
    <el-dialog
      width="900px"
      :title="showTitle"
      :close-on-click-modal="false"
      :append-to-body="true"
      :visible.sync="netWareHouseCareVisibl"
      center
      @close="sendCodeHandleVisible"
      v-bind:class="isValiad ? 'checkInput' :'validInput'"
    >
      <div class="filter-container filter-params">
        <el-form :model="ruleForm" :rules="rules" ref="ruleForm" class="demo-ruleForm">
          <el-row :gutter="10">
            <el-col :span="8">
              <el-form-item label="经销商品牌" prop="carBrandCn">
                <el-input v-model="ruleForm.carBrandCn" size="small" :disabled="state"></el-input>
              </el-form-item>
            </el-col>
            <el-col :span="8">
              <el-form-item label="经销商编码" prop="dlrCode">
                <el-input v-model="ruleForm.dlrCode" size="small" :disabled="state"></el-input>
              </el-form-item>
            </el-col>
            <el-col :span="8">
              <el-form-item label="经销商名称" prop="dlrShortName">
                <el-input v-model="ruleForm.dlrShortName" size="small" :disabled="state"></el-input>
              </el-form-item>
            </el-col>
            <el-col :span="8">
              <el-form-item label="所属省市" prop="provinceName">
                <el-input v-model="ruleForm.provinceName" size="small" :disabled="state"></el-input>
              </el-form-item>
            </el-col>
            <el-col :span="8">
              <el-form-item label="仓库名称" prop="warehouseName">
                <el-select
                  size="small"
                  placeholder="请选择"
                  v-model="ruleForm.warehouseName"
                  @change="getValue"
                >
                  <el-option
                    v-for="item in options"
                    :key="item.value"
                    :label="item.warehouseName"
                    :value="item.warehouseId"
                  ></el-option>
                </el-select>
              </el-form-item>
            </el-col>
            <el-col :span="8">
              <el-form-item label="是否启用" prop="isEnable" clearable>
                <el-select
                  v-model="ruleForm.isEnable"
                  placeholder="请选择启用状态"
                  @change="getIsEnableValue"
                >
                  <el-option label="否" value="0"></el-option>
                  <el-option label="是" value="1"></el-option>
                </el-select>
              </el-form-item>
            </el-col>
            <el-col :span="16" class="remarkStyle">
              <label>备注</label>
              <el-input v-model="ruleForm.remark" placeholder="请输入" size="small"></el-input>
            </el-col>
            <!-- <el-col :span="24" class="inputStyle">
              <label>导入</label>
              <el-input size="small"></el-input>
              <el-upload
                class="upload-demo"
                ref="upload"
                style="width:68px;display:inline-block;"
                :file-list="fileList"
                name="excelFile"
                action
                :headers="uploadHeaders"
                :http-request="handleChange"
                :on-preview="handlePreview"
                :on-error="uploadFalse"
                :on-success="uploadSuccess"
                :auto-upload="true"
                :before-upload="beforeAvatarUpload"
                :before-remove="beforeRemove"
                :on-exceed="handleExceed"
                :limit="1"
                :show-file-list="false"
                list-type="text"
              >
                <el-button size="small">导入</el-button>
              </el-upload>
              <a href="#">Excel模板下载</a>
            </el-col>-->
          </el-row>
        </el-form>
        <!-- <div class="filter-container filter-title">仓位列表</div> -->
        <!-- <el-table
          class="tableHeight"
          :data="list"
          height="200"
          element-loading-text="Loading"
          border
          highlight-current-row
        >
          <el-table-column label="序号" type="index" width="60" align="center"></el-table-column>
          <el-table-column prop="carBrandCn" label="经销商品牌" align="center" width="120"></el-table-column>
          <el-table-column prop="dlrCode" label="经销商编码" align="center" width="90"></el-table-column>
          <el-table-column prop="dlrShortName" label="经销商简称" align="center" width="120"></el-table-column>
          <el-table-column prop="provinceName" label="所属省市" align="center" width="90"></el-table-column>
          <el-table-column prop="warehouseName" label="仓库名称" align="center" width="120"></el-table-column>
          <el-table-column prop="isEnable" label="设置状态" align="center" width="90">
            <template slot-scope="scope">{{ scope.row.isEnable == 1 ? '启用':'停用' }}</template>
          </el-table-column>
          <el-table-column prop="remark" label="备注" align="center"></el-table-column>
        </el-table>-->
        <div class="filter-container filter-button">
          <el-button type="primary" @click="submitForm('ruleForm')">保存</el-button>
          <el-button @click="sendCodeHandleVisible">取 消</el-button>
        </div>
      </div>
    </el-dialog>
  </section>
</template>
<script>
import { paApis } from "@/api/graphQLApiList/pa";
import { requestGraphQL } from "@/api/commonRequest";
import config from "@/utils/config";
export default {
  props: {
    netWareHouseCareVisibl: {
      type: Boolean,
      default: function() {
        return false;
      }
    },
    handleTitle: {
      type: Number,
      default: function() {
        return 1;
      }
    },
    editData: {
      type: Object,
      default: function() {
        return {};
      }
    }
  },
  data() {
    return {
      pageIndex: null,
      pageSize: null,
      wearQuery: {},
      state: true,
      list: [],
      options: [],
      //导入文件
      fileList: [],
      handleVisibled: this.handleVisible,
      showTitle: this.handleTitle == 0 ? "仓库编辑" : "经销商对应仓库维护",
      isValiad: false,
      ruleForm: {
        dlrId: this.editData.dlrId || "",
        dlrStoreId: this.editData.dlrStoreId || "",
        updateControlId: this.editData.updateControlId || "",
        warehouseId: this.editData.warehouseId || "",
        carBrandCn: this.editData.carBrandCn || "",
        dlrCode: this.editData.dlrCode || "",
        dlrShortName: this.editData.dlrShortName || "",
        provinceName: this.editData.provinceName || "",
        warehouseName:
          this.editData.warehouseName != "undefined"
            ? this.editData.warehouseName
            : "" || "",
        isEnable: (this.editData.isEnable = null
          ? ""
          : this.editData.isEnable || ""),
        remark: this.editData.remark || ""
      },
      rules: {
        warehouseName: [
          { required: true, message: "请选择设置状态", trigger: "change" }
        ],
        isEnable: [
          { required: true, message: "请选择启用状态", trigger: "change" }
        ]
      },
      uploadHeaders: {
        Authorization: this.$store.getters.token
      }
    };
  },
  created() {
    this.wearHouseQuery();
  },
  methods: {
    // beforeAvatarUpload(file) {
    //   const extension = file.name.split(".")[1] === "xls";
    //   const extension2 = file.name.split(".")[1] === "xlsx";
    //   if (!extension && !extension2) {
    //     this.$alert("上传文件只能为Excel文件", "提示", {
    //       confirmButtonText: "确定",
    //       type: "warning"
    //     });
    //   }
    //   return extension || extension2;
    // },
    // beforeRemove(file, fileList) {
    //   this.$alert(
    //     `选择文件类型或大小不符，已移除 ${file.name}，请重新选择`,
    //     "提示",
    //     {
    //       confirmButtonText: "确定",
    //       type: "warning"
    //     }
    //   );
    // },
    // handleExceed(files, fileList) {
    //   this.$message.warning(
    //     `当前限制选择 1 个文件，本次选择了 ${
    //       files.length
    //     } 个文件，共选择了 ${files.length + fileList.length} 个文件`
    //   );
    // },
    // uploadSuccess(response) {
    //   if (
    //     response.data.result === "1" &&
    //     response.data.rows != null &&
    //     response.data.rows.length > 0
    //   ) {
    //     var tempList = response.data.rows;
    //     var implistTemp = [];
    //     //导入Excel模块列头、数据是否必填
    //     var excelCols = [
    //       { name: "经销商品牌", required: true },
    //       { name: "经销商编码", required: true },
    //       { name: "经销商简称", required: true },
    //       { name: "所属省市", required: true },
    //       { name: "仓库名称", required: true },
    //       { name: "设置状态", required: true }
    //     ];
    //     var isErrorTemplate = false; // 模版错误
    //     var firstRow = tempList[0];
    //     excelCols.forEach(col => {
    //       // 检查模版是否错误
    //       if (!firstRow.hasOwnProperty(col.name)) isErrorTemplate = true;
    //     });
    //     if (isErrorTemplate) {
    //       this.$alert("Excel模版错误", "提示", {
    //         confirmButtonText: "确定",
    //         type: "warning"
    //       });
    //       this.$refs.upload.clearFiles();
    //       this.dlrList = [];
    //       return;
    //     }
    //     var dataNullErrorMsg = "";
    //     for (var i = 0; i < tempList.length; i++) {
    //       // 检查数据是否为空
    //       if (!this.$utils.isEmpty(dataNullErrorMsg)) break;
    //       var row = tempList[i];
    //       for (var j = 0; j < excelCols.length; j++) {
    //         var col = excelCols[j];
    //         if (col.required == true && this.$utils.isEmpty(row[col.name])) {
    //           dataNullErrorMsg = `Excel第${i + 2}行“${col.name}”不能为空`;
    //           break;
    //         }
    //       }
    //     }
    //     if (!this.$utils.isEmpty(dataNullErrorMsg)) {
    //       this.$alert(dataNullErrorMsg, "提示", {
    //         confirmButtonText: "确定",
    //         type: "warning"
    //       });
    //       this.$refs.upload.clearFiles();
    //       this.dlrList = [];
    //       return;
    //     }
    //     this.$alert("文件导入成功", "提示", {
    //       confirmButtonText: "确定",
    //       type: "success"
    //     });

    //     let b = [];
    //     var a = [
    //       { carBrandCn: "" },
    //       { dlrCode: "" },
    //       { dlrShortName: "" },
    //       { provinceName: "" },
    //       { warehouseName: "" },
    //       { isEnable: "" },
    //       { remark: "" }
    //     ];
    //     for (var i = 0; i < tempList.length; i++) {
    //       if (tempList[i]["经销商品牌"]) {
    //         a[i].carBrandCn = tempList[i]["经销商品牌"];
    //       }
    //       if (tempList[i]["经销商编码"]) {
    //         a[i].dlrCode = tempList[i]["经销商编码"];
    //       }
    //       if (tempList[i]["经销商简称"]) {
    //         a[i].dlrShortName = tempList[i]["经销商简称"];
    //       }
    //       if (tempList[i]["所属省市"]) {
    //         a[i].provinceName = tempList[i]["所属省市"];
    //       }
    //       if (tempList[i]["仓库名称"]) {
    //         a[i].warehouseName = tempList[i]["仓库名称"];
    //       }
    //       if (tempList[i]["设置状态"]) {
    //         a[i].isEnable = tempList[i]["设置状态"];
    //       }
    //       if (tempList[i]["备注"]) {
    //         a[i].remark = tempList[i]["备注"];
    //       }
    //       b.push(a[i]);
    //     }
    //     this.list = b;
    //   } else {
    //     this.$alert("文件导入失败", "提示", {
    //       confirmButtonText: "确定",
    //       type: "warning"
    //     });
    //   }
    //   this.$refs.upload.clearFiles();
    // },
    // uploadFalse(response, file, fileList) {
    //   this.$alert("文件上传失败", "提示", {
    //     confirmButtonText: "确定",
    //     type: "warning"
    //   });
    // },
    // handlePreview(file) {
    //   if (file.response.status) {
    //     this.$alert("此文件导入成功", "提示", {
    //       confirmButtonText: "确定",
    //       type: "success"
    //     });
    //   } else {
    //     this.$alert("此文件导入失败", "提示", {
    //       confirmButtonText: "确定",
    //       type: "warning"
    //     });
    //   }
    // },
    // uploadUrl: function() {
    //   return (
    //     paApis.resolve.APIUrl + config.cH + "v=" + paApis.resolve.ServiceCode
    //   );
    // },
    // //处理文件选择器改变事件
    // handleChange(param) {
    //   //debugger
    //   var url = this.uploadUrl(); // API根据不同功能url不同，请配置到对应模块配置
    //   var that = this;
    //   this.$requestImport(url, param, function(response) {
    //     that.uploadSuccess(response);
    //   });
    // },
    //获取仓库id
    getValue(val) {
      this.ruleForm.warehouseId = val;
    },
    //获取状态码
    getIsEnableValue(val) {
      this.ruleForm.isEnable = val;
    },
    //仓库查询
    wearHouseQuery(page) {
      const that = this;
      let queryObj = {
        // api配置
        apiConfig: paApis.partsOemWareHouseQueryFindAll,
        // 需要调用的API服务配置
        apiServices: [
          {
            //表格中台返回网格的字段
            apiQueryRow: ["warehouseCode", "warehouseName", "warehouseId"]
          }
        ],
        //条件/实体参数（变量），根据typeParam中的定义配置
        variables: {
          pageIndex: 1,
          pageSize: 99999,
          dataInfo: that.wearQuery
        }
      };
      //转换了中台请求格式数据
      var paramD = that.$getParams(queryObj);
      //console.log(paramD)
      // 调用中台API方法（可复用）
      requestGraphQL(paramD).then(response => {
        //console.log(response)
        if (
          response.data[paApis.partsOemWareHouseQueryFindAll.ServiceCode]
            .result === "1"
        ) {
          that.pageTotal =
            response.data[
              paApis.partsOemWareHouseQueryFindAll.ServiceCode
            ].records;
          that.options =
            response.data[
              paApis.partsOemWareHouseQueryFindAll.ServiceCode
            ].rows;
        }
      });
    },
    // 保存
    submitForm(formName) {
      const that = this;
      let obj = {
        dlrId: that.ruleForm.dlrId,
        warehouseId: that.ruleForm.warehouseId,
        provinceId: that.ruleForm.provinceId,
        remark: that.ruleForm.remark,
        updateControlId: that.ruleForm.updateControlId,
        dlrStoreId: that.ruleForm.dlrStoreId,
        isEnable: that.ruleForm.isEnable
      };
      this.$refs[formName].validate(valid => {
        if (valid) {
          let queryObj = {
            //保存需要传 type="mutation"
            type: "mutation",
            // api配置
            apiConfig: paApis.netToStoreMutationSave,
            // 需要调用的API服务配置
            apiServices: [
              {
                //表格中台返回网格的字段
              }
            ],
            //条件/实体参数（变量），根据typeParam中的定义配置
            variables: {
              pageSize: 1000,
              pageIndex: 1,
              //当前中台使用的名称有dataInfo、info，具体查看API文档
              dataInfo: obj
            }
          };
          //转换了中台请求格式数据
          var paramD = that.$getParams(queryObj);
          requestGraphQL(paramD).then(response => {
            if (
              response.data[paApis.netToStoreMutationSave.ServiceCode]
                .result === "1"
            ) {
              //保存成功
              this.$message({
                message: "保存成功",
                type: "success",
                uration: 2000
              });
              this.sendCodeHandleVisible();
            } else {
              // 保存失败
              this.$message({
                message:
                  "保存失败：" +
                  response.data[queryObj.apiConfig.ServiceCode].msg,
                type: "warn",
                uration: 2000
              });
            }
          });
        } else {
          this.isValiad = true;
          console.log("error submit!!");
          return false;
        }
      });
    },
    sendCodeHandleVisible() {
      this.$emit("visible", false);
    }
  }
};
</script>

<style lang="scss" scoped>
/deep/ .remarkStyle {
  text-align: left !important;
  margin-left: 41px !important;
  margin-top: 3px !important;
  margin-bottom: 10px !important;
}
/deep/ .remarkStyle > label {
  width: 7% !important;
  margin-right: -4px !important;
}
/deep/ .remarkStyle .el-input {
  width: 470px !important;
}
/deep/ .inputStyle {
  line-height: 28px;
  text-align: left !important;
  margin-left: 41px !important;
}
/deep/ .inputStyle > label {
  width: 28px !important;
  margin-right: 7px !important;
}
/deep/ .inputStyle .el-input {
  margin-right: 5px;
  width: 470px !important;
}
/deep/ .filter-params label {
  margin-right: 0px;
}
/deep/ .el-input__inner {
  height: 28px;
  line-height: 28px;
}
/deep/ .el-input__icon {
  line-height: 0;
}
/deep/ .el-input__prefix {
  top: 0px;
}
/deep/ .filter-params .el-col {
  margin-bottom: 0px;
}
/deep/ .filter-title {
  height: 0px;
  border-bottom: none;
}
/deep/ .checkInput .el-dialog {
  height: 520px;
}
/deep/ .validInput .el-dialog {
  height: 200px;
}
.el-form-item {
  margin-bottom: 10px !important;
}
</style>

