<!--
* description: 模板-表单
* author: zhongchh
* createdDate: 2019-10-06
* logs:
-->
<template>
  <section class="mixButton">
    <el-row>
      <el-col
        :span="12"
        class="u-btn-left"
      >
        <el-button
          v-for="(item, i) in btnLeft"
          :key="`${name}Left_${i}`"
          :compKey="item.compKey"
          :type="item.type"
          :size="item.size"
          @click="doChildEvent(item.clickEvent, item.argument)"
          :class="item.class"
        >{{item.text}}</el-button>
        <el-dropdown v-if="btnLeftMore.length !== 0">
          <el-button type="primary">
            more<i class="el-icon-arrow-down el-icon--right"></i>
          </el-button>
          <el-dropdown-menu slot="dropdown">
            <el-dropdown-item
              v-for="(item, i) in btnLeftMore"
              :key="`${name}LeftMore${i}`"
            >{{item.text}}</el-dropdown-item>
          </el-dropdown-menu>
        </el-dropdown>
      </el-col>
      <el-col
        :span="12"
        class="u-btn-right"
      >
        <div class="right-btn">
          <el-button
            v-show="(toggleParam && showfuzzyQuery)||!showfuzzyQuery"
            v-for="(item, i) in btnRight"
            :key="`${name}Right_${i}`"
            :compKey="item.compKey"
            :type="item.type"
            :size="item.size"
            @click="doChildEvent(item.clickEvent, item.argument)"
            :class="item.class"
          >{{item.text}}</el-button>
        </div>
        <!-- 模糊搜索 -->
        <div
          id="fuzzyquery"
          class="right-btn"
          v-show="!toggleParam && showfuzzyQuery"
        >
          <el-input
            :placeholder="searchFields"
            v-model="searchValue"
            class="input-with-select"
          >
            <el-button
              type="primary"
              slot="append"
              icon="el-icon-search"
              @click="doChildEvent(scFields.clickEvent,scFields.argument)"
            >{{searchLabel}}</el-button>
          </el-input>
        </div>
        <!-- 高级搜索 -->
        <el-button
          v-if="isShowMore"
          :icon="moreBtnIcon"
          type="danger"
          @click="changeToggleParam"
          class="moreParam"
          plain
        >{{moreLabel}}</el-button>
      </el-col>
    </el-row>
  </section>
</template>
<script>
export default {
  props: {
    // 创建表单的参数
    dynamicButtons: { type: Array, default: () => {} },
    //查询条件个数是否显示高级搜索
    isShowMore: { type: Boolean, default: false },
    // 组件名
    name: { type: String, default: "" },
    // 自定义按钮个数
    showbtnLength: { type: Number, default: 6 },
    // 组件识别名称（模拟key）
    compKey: { type: String, default: "" },
    // 按钮样式
    type: { type: String, default: "" },
    // 按钮尺寸
    size: { type: String, default: "small" },
    // 模糊搜索值
    svFields: { type: String, default: "" },
    //模糊搜索查询条件
    formField: {
      type: Object,
      default: function() {
        return {};
      }
    },
    // 动态组件
    dynamicComponents: {
      type: Array,
      default: function() {
        return [];
      }
    }
  },
  data() {
    return {
      // 表单列
      btnLeft: [],
      btnLeftMore: [],
      btnRight: [],
      moreLabel: "高级搜索",
      searchLabel: "搜索",
      moreBtnIcon: "iconfont icon-Group-spread-up",
      toggleParam: false,
      //搜索框数值
      searchValue: this.svFields,
      //搜索框默认提示内容
      searchFields: "",
      //模糊查询条件
      searchformField: {},
      //是否显示模糊查询
      showfuzzyQuery: { type: Boolean, default: false },
      //模糊搜索框显示项目
      scFields: {
        type: Object,
        default: function() {
          return [];
        }
      }
    };
  },
  created() {
    //设置button的图标
    this.setBtns();
    if (this.dynamicComponents !== [] && this.dynamicComponents !== undefined) {
      var x = [];
      var y = [];
      for (var i = 0; i < this.dynamicComponents.length; i++) {
        x.push(this.dynamicComponents[i].isMust);
        if (
          this.dynamicComponents[i].fuzzySearch !== undefined &&
          this.dynamicComponents[i].fuzzySearch !== ""
        ) {
          y.push(this.dynamicComponents[i]);
          this.searchformField = this.dynamicComponents[i];
        }
      }
      for (var m = 0; m < y.length; m++) {
        if (y.length !== 0 && this.searchFields !== "") {
          this.searchFields = this.searchFields + " / " + y[m].labelName;
        } else {
          this.searchFields = y[m].labelName;
        }
      }
      if (x.includes(true)) {
        this.showfuzzyQuery = false;
      } else {
        this.showfuzzyQuery = true;
      }
    }
    if (this.dynamicButtons !== [] && this.dynamicComponents !== undefined) {
      for (var i = 0; i < this.dynamicButtons.length; i++) {
        if (
          this.dynamicButtons[i].fuzzySearch !== "" &&
          this.dynamicButtons[i].fuzzySearch !== undefined &&
          this.dynamicButtons[i].fuzzySearch
        ) {
          this.scFields = this.dynamicButtons[i];
        }
      }
    }
  },
  watch: {
    searchValue(val) {
      for (var y in this.formField) {
        if (this.searchformField.codeField === y) {
          console.log(this.searchformField.codeField, y);
          this.formField[y] = val;
        }
      }
    }
  },
  methods: {
    changeToggleParam() {
      this.$emit("toggle");
      this.toggleParam = !this.toggleParam;
      if (this.toggleParam) {
        this.moreBtnIcon = "iconfont icon-Group-pick-up";
        this.moreLabel = "收起";
      } else {
        this.moreBtnIcon = "iconfont icon-Group-spread-up";
        this.moreLabel = "高级搜索";
      }
    },
    setBtns() {
      const that = this;
      var leftButtons = [];
      var rightButtons = [];
      for (let index in this.dynamicButtons) {
        var m = this.dynamicButtons[index];
        if (m.position === "left") {
          leftButtons.push(m);
        } else if (m.position === "right") {
          rightButtons.push(m);
        }
      }
      this.btnLeft = leftButtons.slice(0, this.showbtnLength);
      if (this.dynamicButtons.length > this.showbtnLength) {
        this.btnLeftMore = leftButtons.slice(this.showbtnLength);
      }
      this.btnRight = rightButtons;
      this.btnLeft.map(function(item, i) {
        that.setIcon(item);
      });
      this.btnLeftMore.map(function(item, i) {
        that.setIcon(item);
      });
      this.btnRight.map(function(item, i) {
        that.setIcon(item);
      });
    },
    setIcon(item) {
      switch (item.name) {
        case "add": //新增
          item.class = "el-icon-plus";
          // item.class = "iconfont icon-Group-add";
          break;
        case "search": //查询
          item.class = "el-icon-search";
          // item.class = "iconfont icon-group-search";
          break;
        case "reset": //重置
          item.class = "el-icon-refresh-right";
          // item.class = "iconfont icon-group-reset";
          break;
        case "export": //导出
          item.class = " el-icon-printer";
          // item.class = "iconfont icon-group-export";
          break;
        case "choose":
          item.class = "iconfont icon-group-export";
          break;
        case "审核":
          item.class = "el-icon-delete";
          break;
        case "reject": //驳回
          item.class = "el-icon-folder-delete";
          break;
      }
    },
    doChildEvent(clickEvent, args) {
      args = args || {};
      if (typeof clickEvent === "function") {
        clickEvent({ ...args });
      } else {
        clickEvent ? this.$parent[clickEvent]({ ...args }) : false;
      }
    }
  }
};
</script>
