/**
 * description: 公共方法
 * author: luojx
 * createdDate: 2019-07-20
*/
import Vue from 'vue'
import { isString, isObject } from './types'

/**
 * 替换所有字符串
 * @param {string} str 需要操作的字符串
 * @param {string} s1 需要替换的字符
 * @returns {string} s2 替换后的字符
 */
export function replaceAll(str, s1, s2) {
  return str.replace(new RegExp(s1, 'gm'), s2)
}

/**
 * 转换时间为字符串（格式）
 * @param {(Object|string|number)} time
 * @param {string} cFormat
 * @returns {string}
 */
export function parseTime(time, cFormat) {
  if (arguments.length === 0) {
    return null
  }
  const format = cFormat || '{y}-{m}-{d} {h}:{i}:{s}'
  let date
  if (typeof time === 'object') {
    date = time
  } else {
    if ((typeof time === 'string') && (/^[0-9]+$/.test(time))) {
      time = parseInt(time)
    }
    if ((typeof time === 'number') && (time.toString().length === 10)) {
      time = time * 1000
    }
    date = new Date(time)
  }
  const formatObj = {
    y: date.getFullYear(),
    m: date.getMonth() + 1,
    d: date.getDate(),
    h: date.getHours(),
    i: date.getMinutes(),
    s: date.getSeconds(),
    a: date.getDay()
  }
  const time_str = format.replace(/{(y|m|d|h|i|s|a)+}/g, (result, key) => {
    let value = formatObj[key]
    // Note: getDay() returns 0 on Sunday
    if (key === 'a') { return ['日', '一', '二', '三', '四', '五', '六'][value] }
    if (result.length > 0 && value < 10) {
      value = '0' + value
    }
    return value || 0
  })
  return time_str
}

/**
 * 日期转字符串
 * @param {number} time
 * @param {string} option
 * @returns {string}
 */
export function formatTime(time, option) {
  if (('' + time).length === 10) {
    time = parseInt(time) * 1000
  } else {
    time = +time
  }
  const d = new Date(time)
  const now = Date.now()

  const diff = (now - d) / 1000

  if (diff < 30) {
    return '刚刚'
  } else if (diff < 3600) {
    // less 1 hour
    return Math.ceil(diff / 60) + '分钟前'
  } else if (diff < 3600 * 24) {
    return Math.ceil(diff / 3600) + '小时前'
  } else if (diff < 3600 * 24 * 2) {
    return '1天前'
  }
  if (option) {
    return parseTime(time, option)
  } else {
    return (
      d.getMonth() +
      1 +
      '月' +
      d.getDate() +
      '日' +
      d.getHours() +
      '时' +
      d.getMinutes() +
      '分'
    )
  }
}

/**
 * url参数转json对象
 * @param {string} url
 * @returns {Object}
 */
export function param2Obj(url) {
  const search = url.split('?')[1]
  if (!search) {
    return {}
  }
  return JSON.parse(
    '{"' +
    decodeURIComponent(search)
      .replace(/"/g, '\\"')
      .replace(/&/g, '","')
      .replace(/=/g, '":"')
      .replace(/\+/g, ' ') +
    '"}'
  )
}

function extend(to, _from) {
  for (const key in _from) {
    to[key] = _from[key]
  }
  return to
}

// 数值转换为json对象
export function toObject(arr) {
  var res = {}
  for (let i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i])
    }
  }
  return res
}

export const getValueByPath = function(object, prop) {
  prop = prop || ''
  const paths = prop.split('.')
  let current = object
  let result = null
  for (let i = 0, j = paths.length; i < j; i++) {
    const path = paths[i]
    if (!current) break

    if (i === j - 1) {
      result = current[path]
      break
    }
    current = current[path]
  }
  return result
}

// 获取随机数
export const generateId = function() {
  return Math.floor(Math.random() * 10000)
}

// 判断两个值是否相同
export const valueEquals = (a, b) => {
  // see: https://stackoverflow.com/questions/3115982/how-to-check-if-two-arrays-are-equal-with-javascript
  if (a === b) return true
  if (!(a instanceof Array)) return false
  if (!(b instanceof Array)) return false
  if (a.length !== b.length) return false
  for (let i = 0; i !== a.length; ++i) {
    if (a[i] !== b[i]) return false
  }
  return true
}

export const escapeRegexpString = (value = '') => String(value).replace(/[|\\{}()[\]^$+*?.]/g, '\\$&')

// 返回符合条件的数组索引
export const arrayFindIndex = function(arr, pred) {
  for (let i = 0; i !== arr.length; ++i) {
    if (pred(arr[i])) {
      return i
    }
  }
  return -1
}

// 返回符合条件的数组索引对应的项
export const arrayFind = function(arr, pred) {
  const idx = arrayFindIndex(arr, pred)
  return idx !== -1 ? arr[idx] : undefined
}

// 对象强制转数组
export const coerceTruthyValueToArray = function(val) {
  if (Array.isArray(val)) {
    return val
  } else if (val) {
    return [val]
  } else {
    return []
  }
}

// 是否IE浏览器
export const isIE = function() {
  return !Vue.prototype.$isServer && !isNaN(Number(document.documentMode))
}

// 是否Edge浏览器
export const isEdge = function() {
  return !Vue.prototype.$isServer && navigator.userAgent.indexOf('Edge') > -1
}

export const autoprefixer = function(style) {
  if (typeof style !== 'object') return style
  const rules = ['transform', 'transition', 'animation']
  const prefixes = ['ms-', 'webkit-']
  rules.forEach(rule => {
    const value = style[rule]
    if (rule && value) {
      prefixes.forEach(prefix => {
        style[prefix + rule] = value
      })
    }
  })
  return style
}

export const kebabCase = function(str) {
  const hyphenateRE = /([^-])([A-Z])/g
  return str
    .replace(hyphenateRE, '$1-$2')
    .replace(hyphenateRE, '$1-$2')
    .toLowerCase()
}

// 首字母大写
export const capitalize = function(str) {
  if (!isString(str)) return str
  return str.charAt(0).toUpperCase() + str.slice(1)
}

// 对比两个string/json对象是否相同
export const looseEqual = function(a, b) {
  const isObjectA = isObject(a)
  const isObjectB = isObject(b)
  if (isObjectA && isObjectB) {
    return JSON.stringify(a) === JSON.stringify(b)
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b)
  } else {
    return false
  }
}

// 对比两个数组是否相同
export const arrayEquals = function(arrayA, arrayB) {
  arrayA = arrayA || []
  arrayB = arrayB || []

  if (arrayA.length !== arrayB.length) {
    return false
  }

  for (let i = 0; i < arrayA.length; i++) {
    if (!looseEqual(arrayA[i], arrayB[i])) {
      return false
    }
  }

  return true
}

// 对比两个对象是否相同（可以是数值类型也可以是数组）
export const isEqual = function(value1, value2) {
  if (Array.isArray(value1) && Array.isArray(value2)) {
    return arrayEquals(value1, value2)
  }
  return looseEqual(value1, value2)
}

// 判断字符串是否为空
export const isEmpty = function(val) {
  // null or undefined
  if (val == null) return true

  if (typeof val === 'boolean') return false

  if (typeof val === 'number') return !val

  if (val instanceof Error) return val.message === ''

  switch (Object.prototype.toString.call(val)) {
    // String or Array
    case '[object String]':
    case '[object Array]':
      return !val.length

    // Map or Set or File
    case '[object File]':
    case '[object Map]':
    case '[object Set]': {
      return !val.size
    }
    // Plain Object
    case '[object Object]': {
      return !Object.keys(val).length
    }
  }

  return false
}

// 根据路由path获取组件深度
export const getPathDeep = function(path, py) {
  var pcl = py || 3
  var deepCount = path.split('/').length - pcl
  if (deepCount < 0) {
    deepCount = 0
  }
  return deepCount
}

// 根据当前组件获取AppMain视图
export const getParentView = function(path, curComponent, py) {
  // var curParent = parent
  // var deepCount = getPathDeep(path, py)
  // while (deepCount > 0 && curParent.$parent) {
  //   curParent = curParent.$parent
  //   deepCount--
  // }
  // return curParent
  var curParent = null
  if (!curComponent.$refs.refRouterView) {
    while (curComponent && curComponent.$parent) {
      curComponent = curComponent.$parent
      if (curComponent.$refs.refRouterView) {
        curParent = curComponent
        break
      }
    }
  }
  return curParent
}

// 根据当前组件获取AppMain视图高度
export const getAppMainHeight = function(path, curComponent, py) {
  var appMain = getParentView(path, curComponent, py)
  if (appMain != null && appMain !== undefined) {
    if (appMain.offsetHeight) {
      return appMain.offsetHeight
    } else {
      return appMain.$el.offsetHeight
    }
  }
  return 0
}

// 列表结构转为数结构JSON（抽取根节点）
export const parseTreeFromList = function(list, parentFieldId, fieldId) {
  if (!list || list.length === 0) {
    return []
  }
  var first
  var rootList = list.filter(o => o[parentFieldId] === '-1')
  if (rootList && rootList.length > 0) {
    first = rootList[0]
  } else {
    first = list[0]
  }
  var rootParentId = getTreeListRoot(first[parentFieldId], list, parentFieldId, fieldId)
  var roots = list.filter(o => o[fieldId] === rootParentId)
  if (!roots || roots.length < 1) {
    roots = list.filter(o => o[parentFieldId] === rootParentId)
  }

  // var root = roots[0]
  // rootParentId = root[fieldId]
  // root.children = parseTreeFromListFromRoot(rootParentId, list, parentFieldId, fieldId)
  // return root

  for (var i = 0; i < roots.length; i++) {
    rootParentId = roots[i][fieldId]
    roots[i].children = parseTreeFromListFromRoot(rootParentId, list, parentFieldId, fieldId)
  }
  return roots
}

const getTreeListRoot = function(parentId, list, parentFieldId, fieldId) {
  var rootId = parentId
  var parent = list.filter(i => i[fieldId] === rootId && i[fieldId] !== i[parentFieldId])
  if (parent && parent.length > 0) {
    rootId = getTreeListRoot(parent[0][parentFieldId], list, parentFieldId, fieldId)
  }
  return rootId
}

// 列表结构转为数结构JSON
export const parseTreeFromListFromRoot = function(parentId, list, parentFieldId, fieldId) {
  var treeRows = list.filter(o => o[parentFieldId] === parentId && o[fieldId] !== parentId)
  if (treeRows) {
    for (var i = 0; i < treeRows.length; i++) {
      treeRows[i].children = parseTreeFromListFromRoot(treeRows[i][fieldId], list, parentFieldId, fieldId)
    }
  }
  return treeRows
}

// 已作废
// export const getArrayFromJsonArray = function(arrJson, key) {
//   var arr = []
//   // 子Json对象Key前缀
//   var subKeyQx = ''
//   for (var i = 0; i < arrJson.length; i++) {
//     if (arrJson[i][key].indexOf('.') > -1) {
//       if (subKeyQx === arrJson[i][key].split('.')[0]) {
//         // 查看下一记录是否一样的前缀
//         if (i < arrJson.length - 1) {
//           if (subKeyQx !== arrJson[i + 1][key].split('.')[0]) {
//             arr.push(arrJson[i][key].split('.')[1] + '}')
//           } else {
//             arr.push(arrJson[i][key].split('.')[1])
//           }
//         } else {
//           arr.push(arrJson[i][key].split('.')[1] + '}')
//         }
//       } else {
//         subKeyQx = arrJson[i][key].split('.')[0]

//         // 查看下一记录是否一样的前缀
//         if (i < arrJson.length - 1) {
//           if (subKeyQx !== arrJson[i + 1][key].split('.')[0]) {
//             arr.push(arrJson[i][key].split('.')[0] + '{' + arrJson[i][key].split('.')[1] + '}')
//           } else {
//             arr.push(arrJson[i][key].split('.')[0] + '{' + arrJson[i][key].split('.')[1])
//           }
//         } else {
//           arr.push(arrJson[i][key].split('.')[0] + '{' + arrJson[i][key].split('.')[1] + '}')
//         }
//       }
//     } else {
//       subKeyQx = ''
//       arr.push(arrJson[i][key])
//     }
//   }
//   return arr
// }

// 从jsonArray对象中抽取某个键的值组合为数组返回（且把带“.”的key转换成GraphQL多层结构）
// arrJson:一层的json数组
// key:数组中的某个字段，非多层如：carConfigId，多层如：mdmCarColorExtend.carColorName
export const getArrayFromJsonArray = function(arrJson, key) {
  var arr = []
  for (var i = 0; i < arrJson.length; i++) {
    if (arrJson[i]) {
      if (arrJson[i][key].indexOf('.') > -1) {
        var pointCount = arrJson[i][key].split('.').length - 1
        var field = replaceAll(arrJson[i][key], '\\.', '{')
        for (var j = 0; j < pointCount; j++) {
          field += '}'
        }
        arr.push(field)
      } else {
        arr.push(arrJson[i][key])
      }
    }
  }
  return arr
}
export const getArrayFromArray = function(arrOriginal) {
  var arr = []
  for (var i = 0; i < arrOriginal.length; i++) {
    arr.push(getStringFromString(arrOriginal[i]))
    // if (arrOriginal[i].indexOf('.') > -1) {
    //   var pointCount = arrOriginal[i].split('.').length - 1
    //   var field = replaceAll(arrOriginal[i], '\\.', '{')
    //   for (var j = 0; j < pointCount; j++) {
    //     field += '}'
    //   }
    //   arr.push(field)
    // } else {
    //   arr.push(arrOriginal[i])
    // }
  }
  return arr
}
export const getStringFromString = function(strOriginal) {
  if (strOriginal.indexOf('.') > -1) {
    var pointCount = strOriginal.split('.').length - 1
    var field = replaceAll(strOriginal, '\\.', '{')
    for (var j = 0; j < pointCount; j++) {
      field += '}'
    }
    return field
  } else {
    return strOriginal
  }
}
// 导出API请求参数中cloumns转换（xxx.yyy.zzz形式转换为：[xxx][yyy][zzz]）
export const getExportStringFromString = function(strOriginal) {
  if (strOriginal.indexOf('.') > 0) {
    return '[' + replaceAll(strOriginal, '\\.', '][') + ']'
  } else {
    return strOriginal
  }
}

// const getFieldFromJsonArray = function(fullField) {
//   var str = ''
//   var arr = fullField.split('.')
//   var pointCount = arr.length - 1
//   var field = arr[pointCount]
//   var fieldQx = fullField.substring(0, fullField.lastIndexOf('.'))
//   for (var j = 0; j < pointCount; j++) {
//     field += '}'
//   }
//   return str
// }

// GraphQL返回多层结构数据转一层数据（以“.”相连）
export const changeToOneDeepArray = function(arrJson) {
  var arr = []
  for (var i = 0; i < arrJson.length; i++) {
    var obj = {}
    for (var key in arrJson[i]) {
      if (arrJson[i][key] !== null && typeof arrJson[i][key] === 'object') {
        getOneDeepObject(obj, key, arrJson[i][key])
      } else {
        obj[key] = arrJson[i][key]
      }
    }
    arr.push(obj)
  }
  return arr
}

const getOneDeepObject = function(obj, parentKey, jsonObj) {
  for (var subKey in jsonObj) {
    if (jsonObj[subKey] !== null && typeof jsonObj[subKey] === 'object') {
      getOneDeepObject(obj, parentKey + '.' + subKey, jsonObj[subKey])
    } else {
      obj[parentKey + '.' + subKey] = jsonObj[subKey]
    }
  }
}

// 返回上级组件（含有formField对象的组件）
export const getHasFormFieldParentComponent = function(curComp) {
  var parentComp = curComp.$parent
  while (parentComp.$parent && !parentComp.formField) {
    parentComp = parentComp.$parent
  }
  return parentComp
}

// 下载文件
export const downloadFile = function(data, fileName, type) {
  var blob = new Blob([data], { type: type || 'application/vnd.ms-excel' })
  if (window.navigator.msSaveOrOpenBlob) { // IE10
    navigator.msSaveBlob(blob, fileName)
  } else {
    var url = window.URL.createObjectURL(blob)
    var aLink = document.createElement('a')
    aLink.style.display = 'none'
    aLink.href = url
    aLink.setAttribute('download', fileName)
    document.body.appendChild(aLink)
    aLink.click()
    document.body.removeChild(aLink) // 下载完成移除元素
    window.URL.revokeObjectURL(url) // 释放对象
  }
}

// 获取查询url参数
export const getQueryVariable = function(variable) {
  var query = window.location.search.substring(1)
  var vars = query.split('&')
  for (var i = 0; i < vars.length; i++) {
    var pair = vars[i].split('=')
    if (pair[0] === variable) {
      return pair[1]
    }
  }
  return ''
}

// 把文件流转换为二进制
export const getFileBinary = function(file, callBack) {
  var reader = new FileReader()
  reader.readAsArrayBuffer(file)
  reader.onload = function(e) {
    if (typeof callBack === 'function') {
      callBack.call(this, this.result)
    }
  }
}

// 计算在指定秒数后是否已经过期
export const globalCheckIsExp = function(cacheTime, cacheSeconds) {
  var isExp = false
  var now = new Date()
  now.setSeconds(now.getSeconds() - cacheSeconds)
  if (cacheTime !== null && now > cacheTime) {
    isExp = true
  }
  return isExp
}

// 从一个数组里面通过一个字段找某个值，返回对应的另外一个字段
// 例如：从值列表中通过value找到label
export const getOneValFromList = function(itemArray, valueToSearch, fieldToSearch, fieldToReturn) {
  if (itemArray == null || itemArray.length === 0) return ''
  var searchItems = itemArray.filter(item => item[fieldToSearch] === valueToSearch)
  if (searchItems.length > 0) return searchItems[0][fieldToReturn]
  return ''
}

// 设置网格自适应高度
export const setTableHeight = function(that, isResize, defTableHeight) {
  var tableHeight = defTableHeight || 310
  var appMainHeight = getAppMainHeight(that.$route.path, that)
  if (appMainHeight > 0) {
    // 减去Padding-top距离8
    var curTableHeight = appMainHeight
    // 减去查询按钮区域高度
    if (that.$refs.searcheHeight) {
      curTableHeight -= that.$refs.searcheHeight.offsetHeight
    }
    // 减去查询查询条件标题区域高度
    if (that.$refs.conTitleHeight) {
      curTableHeight -= that.$refs.conTitleHeight.offsetHeight
    }
    // 减去查询查询条件区域高度
    if (that.$refs.conHeight) {
      curTableHeight -= that.$refs.conHeight.offsetHeight
    }
    // 减去查询结果标题区域高度
    if (that.$refs.resultTitleHeight) {
      curTableHeight -= that.$refs.resultTitleHeight.offsetHeight
    }
    // 减去分页区域高度
    if (that.$refs.paginationHeight) {
      if (that.$refs.paginationHeight.offsetHeight) {
        curTableHeight -= that.$refs.paginationHeight.offsetHeight
      } else {
        curTableHeight -= that.$refs.paginationHeight.$el.offsetHeight
      }
    }
    // 减去margin-top/bottom值
    if (!that.$utils.isIE() || isResize) {
      tableHeight = curTableHeight - (that.tableMarginHeight || 0) - (that.tableOtherHeight || 0)
    } else {
      // IE浏览器需要减去额外高度
      tableHeight = curTableHeight - (that.tableMarginHeight || 0) - (that.tableOtherHeight || 0) // - 30
    }
  }
  return tableHeight
}

// 设置监听组件
// isDialog:是否对话框内容（预留）
// fieldName:表单对象名称（默认为：formField）
// isForm:是否表单（非网格）
// 监听parentFileds字段格式（type=show或value，show：监听组件显示，value：监听组件值，空：同value，copy：复制(同步)组件值，set：设置对象值）
// 如：
// 监听组件值传递：value:监听字段(本组件)1-对应父组件字段1|监听字段(本组件)2-对应父组件字段2
// 监听组件显示：show:监听字段(父组件formField的对应字段)-显示组件值-隐藏组件值
// 复制(同步)组件值：copy:监听字段
// 设置对象值：set:监听字段-对象字段(tableComponents中的codeField名称)  【预留】
// 同时使用value和show需要用“,”隔开
// 组件赋值,如copy:userName
export const watchComp = function(that, isDialog, fieldName, isForm) {
  const strFieldName = fieldName || 'formField'
  if (that.tableComponents && ((isForm === true && that.$refs) || (isForm !== true && that.$refs.multipleTable))) {
    const chainCompList = that.tableComponents.filter(o => o.parentFileds != null && o.parentFileds !== '')
    if (chainCompList.length > 0) {
      chainCompList.forEach(comp => {
        // 分割show/value
        const arrFields = comp.parentFileds.split(',')
        for (let i = 0; i < arrFields.length; i++) {
          if (arrFields[i].indexOf(':') < 0) {
            arrFields[i] = 'value:' + arrFields[i]
          }
          const parentFields = arrFields[i].split(':')[1]
          if (arrFields[i].indexOf('value') > -1) {
            // 监听组件值控制
            const pArr = parentFields.split('|')
            for (const pStr in pArr) {
              const pDic = pArr[pStr].split('-')
              if (pDic.length === 1) pDic.push(pDic[0])
              if (!that[strFieldName].hasOwnProperty(pDic[1])) continue
              that.$watch(strFieldName + '.' + pDic[1], function() { // 监控组件依赖的值
                if (isForm === true) {
                  // 表单只要获取当前页面即可
                  that.$refs[comp.isRequire ? comp.isRequire + comp.compKey : comp.compKey][0].setQueryFields(that.formField)
                } else {
                  // 非表单需要读取multipleTable（oneTable模板）的下层组件
                  that.$refs.multipleTable.$refs[comp.isRequire ? comp.isRequire + comp.compKey : comp.compKey][0].setQueryFields(that.formField)
                }
              })
            }
          } else if (arrFields[i].indexOf('show:') > -1) {
            // 监听组件显示控制
            const pDic = parentFields.split('-')
            if (pDic.length !== 3 || !that[strFieldName].hasOwnProperty(pDic[0])) continue
            that.$watch(strFieldName + '.' + pDic[0], function() { // 监控组件依赖的值
              let isShow = true
              if (that[strFieldName][pDic[0]] === pDic[2]) {
                isShow = false
              }
              if (isForm === true) {
                // 表单只要获取当前页面即可
                that.$refs[comp.isRequire ? comp.isRequire + comp.compKey : comp.compKey][0].setIsShow(isShow)
              } else {
                // 非表单需要读取multipleTable（oneTable模板）的下层组件
                that.$refs.multipleTable.$refs[comp.isRequire ? comp.isRequire + comp.compKey : comp.compKey][0].setIsShow(isShow)
              }
            })
          } else if (arrFields[i].indexOf('copy:') > -1) {
            // 复制(同步)组件值
            if (!that[strFieldName].hasOwnProperty(parentFields)) continue
            that.$watch(strFieldName + '.' + parentFields, function() {
              if (isForm === true) {
                // 表单只要获取当前页面即可
                that.$refs[comp.isRequire ? comp.isRequire + comp.compKey : comp.compKey][0].setCopy(that.formField[parentFields])
              } else {
                // 非表单需要读取multipleTable（oneTable模板）的下层组件
                that.$refs.multipleTable.$refs[comp.isRequire ? comp.isRequire + comp.compKey : comp.compKey][0].setCopy(that.formField[parentFields])
              }
            })
          } else if (arrFields[i].indexOf('set:') > -1) {
            // 设置对象值
            // 预留
          }
        }
      })
    }
  }
}

// 设置组件不可编辑
// compObjName:需要赋值的对象名称
// isExecOther:是否执行otherSetDisable方法
// formObjName:监听对象（监听字段所在对象）名称
// 读取parentFileds属性配置中的disabled
// 监听parentFileds字段格式（disabled：设置组件不可编辑）：
// 如：
// 设置组件不可编辑：disabled:监听字段（监听空值）-需要对tableComponents中进行设置disabled的codeField-类型（监听字段为空时赋值给disabled值类型（true/false），默认空表示false）
// 注意：必须设置disabled，如：disabled=null, parentFileds="disabled:carBrandCode-carBrandCode-false"
export const setDisable = function(that, compObjName, isExecOther, formObjName) {
  var tmpCompObjName = compObjName || 'tableComponents'
  var tmpFormField = formObjName || 'formField'
  if (!that[tmpFormField]) return
  if (that[tmpCompObjName] && that.$refs) {
    const chainCompList = that[tmpCompObjName].filter(o => o.parentFileds != null && o.parentFileds !== '' && o.disabled !== undefined)
    if (chainCompList.length > 0) {
      chainCompList.forEach(comp => {
        const arrFields = comp.parentFileds.split(',')
        for (let i = 0; i < arrFields.length; i++) {
          if (arrFields[i].indexOf('disabled:') > -1) {
            const parentFields = arrFields[i].split(':')[1]
            // 设置不可编辑
            if (parentFields.length > 0) {
              const pDic = parentFields.split('-')
              if (!that[tmpFormField].hasOwnProperty(pDic[0])) continue
              if (pDic.length < 2) {
                pDic.push(pDic[0])
                pDic.push('true')
              }
              if (pDic.length < 3) pDic.push('true')
              let disabled
              if (pDic[2] === 'false') {
                disabled = true
              } else {
                disabled = false
              }
              if (that[tmpFormField][pDic[0]] !== undefined && that[tmpFormField][pDic[0]] !== '') {
                disabled = !disabled
              }
              if (comp.codeField === pDic[1]) {
                comp.disabled = disabled
              }
            }
          }
        }
      })
    }
  }
  if (isExecOther !== false && that.otherSetDisable) {
    that.otherSetDisable(that, compObjName)
  }
}

// 设置组件查询字段
export const setQueryFields = function(that, obj, dataObjName, cb, formObjName) {
  const formName = formObjName || 'formField'
  if (that.parentFileds == null || that.parentFileds === '') return false
  var parent = that.$utils.getHasFormFieldParentComponent(that)
  if (!parent || !parent[formName]) return false
  var isSet = false
  var arrFields = that.parentFileds.split(',')
  var tmpFields
  for (let i = 0; i < arrFields.length; i++) {
    if (arrFields[i].indexOf(':') < 0) {
      tmpFields = arrFields[i]
      break
    }
    if (arrFields[i].split(':')[0] === 'value') {
      tmpFields = arrFields[i].split(':')[1]
      break
    }
  }
  if (tmpFields) {
    var pArr = tmpFields.split('|')
    for (var pStr in pArr) {
      var pDic = pArr[pStr].split('-')
      if (pDic.length === 1) pDic.push(pDic[0])
      if (that[dataObjName].hasOwnProperty(pDic[0]) && parent[formName].hasOwnProperty(pDic[1])) {
        that[dataObjName][pDic[0]] = obj !== null && obj !== undefined ? obj[pDic[1]] : parent[formName][pDic[1]]
        isSet = true
      }
    }
  }
  if (isSet) {
    if (typeof cb === 'function') {
      cb.call()
    }
    return true
  }
  return false
}

// 设置网格中组件查询字段
export const setRowQueryFields = function(that, dataObjName) {
  const curDataObjName = dataObjName || 'listQuery'
  if (that.rowFileds != null && that.rowFileds !== '' && that.curTableRow != null && that[curDataObjName]) {
    let isSet = false
    const pArr = that.rowFileds.split('|')
    for (const pStr in pArr) {
      const pDic = pArr[pStr].split('-')
      if (pDic.length === 1) pDic.push(pDic[0])
      if (that[curDataObjName].hasOwnProperty(pDic[0]) && that.curTableRow.hasOwnProperty(pDic[1])) {
        that[curDataObjName][pDic[0]] = that.curTableRow[pDic[1]]
        isSet = true
      }
    }
    if (isSet === true && that.curPopupsKey) {
      that.curPopupsKey = that.codeField + that.$utils.generateId()
    }
  }
}

// rule模式校验
export const validateForm = function(rule, value, callback) {
  var lableName = rule.label // 校验项名字
  var validName = rule.validrule // 校验规则类型
  // 判断是否必填
  if (rule.required) {
    if (!value) {
      return callback(new Error(lableName + '不可以为空'))
    }
  }
  // 自定义正则
  if (validName.isformat !== undefined) {
    const reg = validName.isformat
    if (!reg.test(value)) {
      callback(new Error('请输入正确的' + lableName + '格式'))
    }
  }
  // 最小长度
  if (validName.minlength !== undefined) {
    if (value.length < rule.minlength && value !== '') {
      callback(new Error(lableName + '不能少于' + validName.minlength + '个字'))
    }
  }
  // 最大长度
  if (validName.maxlength !== undefined) {
    if (value.length > rule.maxlength && value !== '') {
      callback(new Error(lableName + '不能大于' + validName.maxlength + '个字'))
    }
  }
  // 最大值
  if (validName.max !== undefined) {
    if (Number(value) && Number(value) > validName.max && value !== '') {
      callback(new Error(lableName + '不能超过' + validName.max))
    }
  }
  // 最小值
  if (validName.min !== undefined) {
    if (Number(value) && Number(value) < validName.min && value !== '') {
      callback(new Error(lableName + '不能低于' + validName.min))
    }
  }
  // 最大时间
  if (validName.maxtime !== undefined && value !== '') {
    value = value.replace('-', '/')// 替换字符，变成标准格式
    value = new Date(Date.parse(value))
    if (validName.maxtime > value) {
      callback(new Error(lableName + '不能大于' + validName.maxtime))
    }
  }
  // 最小时间
  if (validName.mintime !== undefined && value !== '') {
    value = value.replace('-', '/')// 替换字符，变成标准格式
    value = new Date(Date.parse(value))
    if (validName.mintime < value) {
      callback(new Error(lableName + '不能少于' + validName.mintime))
    }
  }
  // 汉字
  if (validName.isword) {
    if (value.charCodeAt() <= 128 && value.charCodeAt() > 0 || value === '') {
      callback(new Error('请输入汉字'))
    }
  }
  // 正整数
  if (validName.isInteger) {
    if (!Number(value)) {
      callback(new Error('请输入正整数'))
    } else {
      const re = /c|(^[0-9]{6,12}$)/
      const rsCheck = re.test(value)
      if (!rsCheck) {
        callback(new Error('请输入正整数'))
      }
    }
  }
  // 手机号
  if (validName.isPhone) {
    const pattern = /^1[34578]\d{9}$/
    if (!pattern.test(value)) {
      return callback(new Error('请输入正确的' + lableName))
    }
  }
  // 邮箱
  if (validName.isEmail) {
    const reg = /^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/
    if (!reg.test(value.trim())) {
      callback(new Error('请输入正确邮箱地址'))
    }
  }
  // 身份证
  if (validName.iscP) {
    var iscP = /^[1-9]\d{5}(18|19|([23]\d))\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d{3}[0-9Xx]$/
    if (!iscP.test(value)) {
      return callback(new Error('请输入正确的' + lableName))
    }
  }
  // 车牌号
  if (validName.iscPattern) {
    var iscPattern = /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}[A-Z0-9]{4}[A-Z0-9挂学警港澳]{1}$/
    if (!iscPattern.test(value)) {
      return callback(new Error('请输入正确的' + lableName))
    }
  }
}
//  模板模式校验
export const validataMoth = function(pageItem, pageType, template) {
  // pageItem当前组件 pageType场景 template模板名称（模板页面reft名称）
  var vPage = {}
  var vaildVueComponent = []
  // validpopup弹窗校验  validpage当前页面校验  other混入单组件
  switch (pageType) {
    case 'validpopup':
      vPage = pageItem.$refs
      break // 混入弹窗组件数据保存
    case 'validpage':
      vPage = pageItem.$refs.multipleTable.$refs
      break // 混入网格查询数据保存
  }
  // 模板内是否显示提示图标
  var resuleTotle = []
  if (pageType === 'validpopup' || pageType === 'validpage') {
    pageItem.validateValue = []
    for (var a in vPage) {
      // 多网格模板
      if (template !== undefined) {
        if ((a.indexOf(template + 'true')) === 0) {
          vaildVueComponent.push(vPage[a][0].$children[0].$children)
        }
      } else {
        // 零网格与单网格模板
        if (a.slice(0, 4) === 'true') {
          if (vPage[a][0] === undefined) { vaildVueComponent.push(vPage[a].$children) } else { vaildVueComponent.push(vPage[a][0].$children[0].$children) }
        }
      }
    }
    // 判断是否有值
    var validIcon = []
    for (var i = 0; i < vaildVueComponent.length; i++) {
      for (var x in vaildVueComponent[i]) {
        if (vaildVueComponent[i][x].$refs.validateFormate) {
          pageItem.validateValue.push(vaildVueComponent[i][x - 1])
          validIcon.push(vaildVueComponent[i][x])
        }
      }
    }
    for (var n in pageItem.validateValue) {
      this.validataRules(validIcon[n], pageItem.validateValue[n].value)
      resuleTotle.push(validIcon[n].iconV)
    }
  } else {
    // 组件内是否显示提示图标
    var vailFormate = pageItem.$children[0].$children[2]
    this.validataRules(vailFormate, pageItem.modelCode)
    resuleTotle.push(vailFormate.iconV)
  }
  if (!resuleTotle.includes('1')) {
    pageItem.valid = true
  } else {
    pageItem.valid = false
  }
}
// 生成GUID
export const guid = function() {
  var s = []
  var hexDigits = '0123456789abcdef'
  for (var i = 0; i < 36; i++) {
    s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1)
  }
  s[14] = '4' // bits 12-15 of the time_hi_and_version field to 0010
  s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1) // bits 6-7 of the clock_seq_hi_and_reserved to 01
  s[8] = s[13] = s[18] = s[23] = '-'

  var guid = s.join('')
  return guid
}
// 自定义校验规则
export const validataRules = function(valRule, value) {
  var t = valRule.curLabelName
  var v = valRule.validrule
  var i = valRule.iconV
  var m = valRule.validataMessage
  if (!value) {
    i = '1'
    m = t + '不可以为空'
  } else {
    if (v !== undefined) {
      if (v.max !== undefined && Number(value) && Number(value) > v.max && value !== '') {
        // 最大值
        i = '1'
        m = t + '不能超过' + v.max
      } else if (v.min !== undefined && Number(value) && Number(value) < v.min && value !== '') {
        // 最小值
        i = '1'
        m = t + '不能低于' + v.min
      } else if (v.isformat !== undefined && !v.isformat.test(value)) {
        // 自定义正则
        i = '1'
        m = '请输入正确的' + t + '格式'
      } else if (v.minlength !== undefined && value.length < v.minlength && value !== '') {
        // 最小长度
        i = '1'
        m = t + '不能少于' + v.minlength + '个字'
      } else if (v.maxlength !== undefined && value.length > v.maxlength && value !== '') {
        // 最大长度
        i = '1'
        m = t + '不能超过' + v.maxlength + '个字'
      } else if (v.maxtime !== undefined && value !== '' && v.maxtime > new Date(Date.parse(value.replace('-', '/')))) {
        // 最大时间
        i = '1'
        m = t + '不能大于' + v.maxtime
      } else if (v.mintime !== undefined && value !== '' && v.mintime < new Date(Date.parse(value.replace('-', '/')))) {
        // 最小时间
        i = '1'
        m = t + '不能少于' + v.mintime
      } else if (v.isword && value.charCodeAt() <= 128 && value.charCodeAt() > 0 || value === '') {
        // 汉字
        i = '1'
        m = '请输入汉字'
      } else if (v.isPhone && !(/^1[34578]\d{9}$/).test(value)) {
        // 手机号
        i = '1'
        m = '请输入正确的' + t
      } else if (v.isEmail && !(/^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/).test(value.trim())) {
        // 邮箱
        i = '1'
        m = '请输入正确邮箱地址'
      } else if (v.iscP && !(/^\d{6}(18|19|20)?\d{2}(0[1-9]|1[012])(0[1-9]|[12]\d|3[01])\d{3}(\d|[xX])$/).test(value)) {
        // 身份证
        i = '1'
        m = '请输入正确的身份证号'
      } else if (v.iscPattern && !(/^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}[A-Z0-9]{4}[A-Z0-9挂学警港澳]{1}$/).test(value)) {
        // 车牌号
        i = '1'
        m = '请输入正确的' + t
      } else { i = '2' }
    } else { i = '2' }
  }
  valRule.iconV = i
  valRule.validataMessage = m
}

// 深度复制对象到对象（不使用整体赋值）
export const deepClone = function(toObj, fromObj) {
  // 判断复制的目标是数组还是对象
  for (const key in fromObj) {
    // 遍历目标
    if (fromObj.hasOwnProperty(key)) {
      if (fromObj[key] && typeof fromObj[key] === 'object') {
        // 如果值是对象，就递归一下
        deepClone(toObj[key], fromObj[key])
      } else {
        // 如果不是，就直接赋值
        toObj[key] = fromObj[key]
      }
    }
  }
}
// 获取深度复制对象
export const getDeepClone = function(toObj, fromObj) {
  const target = fromObj.constructor === Array ? [] : {}
  // 判断复制的目标是数组还是对象
  for (const key in fromObj) {
    // 遍历目标
    if (fromObj.hasOwnProperty(key)) {
      if (fromObj[key] && typeof fromObj[key] === 'object') {
        // 如果值是对象，就递归一下
        target[key] = fromObj[key].constructor === Array ? [] : {}
        target[key] = getDeepClone(fromObj[key])
      } else {
        // 如果不是，就直接赋值
        target[key] = fromObj[key]
      }
    }
  }
  return target
}

export default {
  // 转换时间为字符串（格式）
  parseTime,
  // 日期转字符串
  formatTime,
  // url参数转json对象
  param2Obj,
  // 数值转换为json对象
  toObject,
  getValueByPath,
  // 获取随机数
  generateId,
  // 判断两个值是否相同
  valueEquals,
  // 返回符合条件的数组索引
  arrayFindIndex,
  // 返回符合条件的数组索引对应的项
  arrayFind,
  // 对象强制转数组
  coerceTruthyValueToArray,
  // 是否IE浏览器
  isIE,
  // 是否Edge浏览器
  isEdge,
  autoprefixer,
  kebabCase,
  // 首字母大写
  capitalize,
  // 对比两个对象是否相同
  isEqual,
  // 判断字符串是否为空
  isEmpty,
  // 根据路由Path获取视图深度
  getPathDeep,
  // 根据路由path获取上级视图
  getParentView,
  // 列表结构转为数结构JSON
  parseTreeFromList,
  // 从jsonArray对象中抽取某个键的值组合为数值返回
  getArrayFromJsonArray,
  // 从apiQueryRow转换为多层结构
  getArrayFromArray,
  // 从字符串字段（带“.”）转换为多层结构
  getStringFromString,
  // 导出API请求参数中cloumns转换（xxx.yyy.zzz形式转换为：[xxx][yyy][zzz]）
  getExportStringFromString,
  // GraphQL返回多层结构数据转一层数据（以“.”相连）
  changeToOneDeepArray,
  // 根据当前组件获取AppMain组件高度
  getAppMainHeight,
  // 返回上级组件（含有formField对象的组件）
  getHasFormFieldParentComponent,
  // 下载文件
  downloadFile,
  // 获取查询url参数
  getQueryVariable,
  // 文件流转二进制
  getFileBinary,
  // 计算在指定秒数后是否已经过期
  globalCheckIsExp,
  // 从一个数组里面通过一个字段找某个值，返回对应的另外一个字段
  getOneValFromList,
  // 设置网格自适应高度
  setTableHeight,
  // 设置监听组件
  watchComp,
  // 设置组件查询字段
  setQueryFields,
  // 设置网格中组件查询字段
  setRowQueryFields,
  // 设置不可编辑
  setDisable,
  // rule模式校验
  validateForm,
  // 模板模式校验
  validataMoth,
  // 自定义校验规则
  validataRules,
  // 生成GUID
  guid,
  // 深度复制对象
  deepClone,
  // 获取深度复制对象
  getDeepClone
}

